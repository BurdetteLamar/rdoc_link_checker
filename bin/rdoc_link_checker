#!/usr/bin/env ruby

require 'getoptlong'
require_relative '../lib/rdoc_link_checker'

options = GetoptLong.new(
  ['--html_dirpath', '-d', GetoptLong::REQUIRED_ARGUMENT],
  ['--onsite_only', '-l', GetoptLong::NO_ARGUMENT],
  ['--version',     '-v', GetoptLong::NO_ARGUMENT],
  ['--help',        '-h', GetoptLong::NO_ARGUMENT]
)

def help
  puts <<EOT
Usage:
  rdoc_link_checker html_dirpath options

The argument is the path to a directory containing a tree
of RDoc-generated HTML files, such as those generated by command

  rdoc --visibility=private --op html . # Note the trailing dot.

Options:
  --onsite_only   Check link targets only on pages in the file tree at <html_dirpath>,
                  and not those on other local pages or those on the web.
                  May speed up processing by an order of magnitude.                   
  --version       Print the version and exit.
  --help          Print this help and exit.
  
The output is file <html_dirpath>/Report.htm, which reports broken links.
EOT
  exit
end

def version
  puts RDocLinkChecker::VERSION
  exit
end

onsite_only = false
options.each do |option, argument|
  case option
  when '--onsite_only'
    onsite_only = true
  when '--help'
    help
  when '--version'
    version
  end
end

message = nil
case ARGV.size
when 0
  message = "Expected one argument; got none."
when 1
  # Okay.
else
  message = "Expected one argument, not #{ARGV.inspect}."
end
raise ArgumentError.new(message) if message

html_dirpath = ARGV[0]
RDocLinkChecker.new(html_dirpath, onsite_only: onsite_only).check